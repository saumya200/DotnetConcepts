👀 ViewData, ViewBag, and ViewModel in ASP.NET (Simple Explanation)

When working with ASP.NET MVC, you often need to send data from a Controller to a View. There are three common ways to do this:

1️⃣ ViewData 📦 (Dictionary)
2️⃣ ViewBag 🛍️ (Dynamic)
3️⃣ ViewModel 📘 (Strongly Typed Class)

Let’s understand them with a simple pizza shop example! 🍕
1️⃣ ViewData 📦 (Like a Box of Notes)

    What it is? A dictionary (key-value pairs) for storing and passing data between Controller and View.
    How it works? It stores objects (values) using string keys, like a box with labeled notes.
    Data Type? Needs typecasting (convert before using).
    Lifetime? Available only during the current request.

Example:

👨‍🍳 The chef (Controller) writes pizza name and price on sticky notes and places them in a box (ViewData).
👦‍ The waiter (View) takes out the notes and reads them.
Controller Code (Setting Data in ViewData)

public IActionResult Order()
{
    ViewData["PizzaName"] = "Margherita";
    ViewData["Price"] = 10.99;
    
    return View();
}

View Code (Using ViewData in Razor)

<h2>Your Order:</h2>
<p>Pizza: @ViewData["PizzaName"]</p>
<p>Price: $@ViewData["Price"]</p>

✅ Output:

Your Order:
Pizza: Margherita
Price: $10.99

⚠ Drawback: Needs typecasting ((string)ViewData["PizzaName"]), otherwise it may cause errors.
2️⃣ ViewBag 🛍️ (Like a Shopping Bag)

    What it is? A dynamic property for passing data from Controller to View.
    How it works? Similar to ViewData, but uses dot notation (.) instead of key-value pairs.
    Data Type? No typecasting needed (stores objects dynamically).
    Lifetime? Available only during the current request.

Example:

👨‍🍳 The chef (Controller) puts pizza size and topping in a bag (ViewBag).
👦‍ The waiter (View) takes out the items and serves them.
Controller Code (Setting Data in ViewBag)

public IActionResult Order()
{
    ViewBag.PizzaSize = "Large";
    ViewBag.Topping = "Mushrooms";
    
    return View();
}

View Code (Using ViewBag in Razor)

<h2>Your Order Details:</h2>
<p>Size: @ViewBag.PizzaSize</p>
<p>Topping: @ViewBag.Topping</p>

✅ Output:

Your Order Details:
Size: Large
Topping: Mushrooms

⚠ Drawback: No compile-time checking, so if you mistype ViewBag.PizzaSize as ViewBag.PizzaSiz, it won't show an error until runtime.
3️⃣ ViewModel 📘 (Best Practice - A Full Menu)

    What it is? A strongly typed class used to send structured data to Views.
    How it works? Instead of using ViewData or ViewBag, we create a model class with properties and pass it to the View.
    Data Type? Strongly typed (no typecasting needed).
    Lifetime? Available only during the current request.
    Best for? Complex data like multiple objects, lists, and forms.

Example:

📜 The chef (Controller) creates a full menu card (ViewModel) with multiple details.
👦‍ The waiter (View) serves the structured menu.
Step 1️⃣ - Create a ViewModel (PizzaOrder.cs)

public class PizzaOrder
{
    public string PizzaName { get; set; }
    public double Price { get; set; }
    public string Size { get; set; }
    public string Topping { get; set; }
}

Step 2️⃣ - Set Data in Controller

public IActionResult Order()
{
    PizzaOrder order = new PizzaOrder()
    {
        PizzaName = "Pepperoni",
        Price = 12.99,
        Size = "Medium",
        Topping = "Extra Cheese"
    };
    
    return View(order);
}

Step 3️⃣ - Use Data in View (Order.cshtml)

<h2>Your Order Summary:</h2>
<p>Pizza: @Model.PizzaName</p>
<p>Size: @Model.Size</p>
<p>Topping: @Model.Topping</p>
<p>Price: $@Model.Price</p>

✅ Output:

Your Order Summary:
Pizza: Pepperoni
Size: Medium
Topping: Extra Cheese
Price: $12.99

✅ Best Practice! ViewModel is structured, safe, and easy to maintain.
🎯 When to Use What?
Feature	                              ViewData 📦	                 ViewBag 🛍️	                            ViewModel 📘

Data Type	                      Dictionary (Key-Value)	       Dynamic Object	                        Strongly Typed Class
Type Safety	                    ❌ No (needs typecasting)	  ❌ No (prone to errors)	             ✅ Yes (compile-time checking)
Performance	                           ⚡ Fast	                      ⚡ Fast	                                  ✅ Best
Use Case	                     Small data (e.g., page title)	Small data (e.g., notifications)	Complex data (best practice)
Recommended?	                       ❌ No	                          ❌ No	                                 ✅ Yes (Best)

🎉 Final Takeaways

✔ ViewData and ViewBag are simple ways to send small data, but not recommended for large or structured data.
✔ ViewModel is the best practice because it's strongly typed, safer, and better for complex data.
✔ If your project has forms, lists, or multiple objects, always go for ViewModel.