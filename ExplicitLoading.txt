--------------------------------🚀 Understanding Explicit Loading in EF Core----------------------------------------------------------

We already learned about:

    Lazy Loading = Loads related data only when needed.
    Eager Loading = Loads everything at once.

Now, let’s talk about Explicit Loading, which is like a mix of both! 🎭
🔎 What is Explicit Loading?

Explicit Loading means you decide when to load related data manually.
🏪 Example: A Customer Wants Specific Information

Imagine a customer comes to your toy store and says:
1️⃣ "Give me a list of all toys." 🧸 (First Request)
2️⃣ After a few minutes, they say: "Now tell me who bought the Teddy Bear." 🧍‍♂️ (Second Request)

Instead of loading all the customer details in the first request (Eager Loading) or loading them automatically when accessed (Lazy Loading), you manually fetch the related data only when needed.
📝 Code Example of Explicit Loading

using (var context = new ToyStoreContext())  
{  
    var toy = context.Toys.FirstOrDefault(t => t.Name == "Teddy Bear"); // Load only the toy  

    // Later, when needed, manually load the orders
    context.Entry(toy).Collection(t => t.Orders).Load();  
}

🔵 What happens?

    The first query only loads the toy.
    The second query loads the related orders manually when we decide to fetch them.

👉 EF Core Translates This to Two SQL Queries:

SELECT * FROM Toys WHERE Name = 'Teddy Bear';  -- First Query (Loads Only Toy)
SELECT * FROM Orders WHERE ToyId = 1;         -- Second Query (Loads Orders When Needed)

📊 How is Explicit Loading Different?
Feature	Lazy Loading 💤	Eager Loading 🚀	Explicit Loading 🎭
When Data is Loaded	Automatically when accessed	Immediately with main data	Manually, when we decide
Number of Queries	Multiple small queries	One big query	Two or more queries (controlled)
Best For	Small apps where related data is rarely used	Large apps where related data is always needed	When you need control over when to load data

💡 Use Explicit Loading when:

    You don’t want to load unnecessary data upfront.
    You need more control over when related data is fetched.
    You want to reduce memory usage but still load related data efficiently.

🎉 How a 5-Year-Old Can Remember This

    Lazy Loading = Wait until you ask for it.
    Eager Loading = Get everything immediately.
    Explicit Loading = You decide when to fetch more details!


    ----------------------------------------REAL-WORLD SCENARIO --------------------------------------------------------------------------

    📌 3️⃣ Real-World Scenario for Explicit Loading 🎭
🏥 Healthcare System (Patient Records)

Imagine a hospital management system where doctors only see basic patient info by default but can request medical history when needed.

    A doctor's dashboard shows only Patient Name, Age, and Condition.
    If the doctor wants to see medical history, then the system loads that data only when requested.

How Explicit Loading Helps Here:

    It does not load unnecessary data upfront, saving memory.
    It allows manual control over when extra data is retrieved.

🔵 Example in EF Core:

var patient = context.Patients.FirstOrDefault(p => p.Id == 10);  // Load only patient details
context.Entry(patient).Collection(p => p.MedicalHistory).Load();  // Load medical history manually

👉 EF Core loads the medical history only when needed, reducing initial load time.

✔ Best for: Apps where related data is rarely needed but must be loaded on request

-------------------------------------------------------------------------------------------------------------------------------
🎯 Summary: Which One Should You Use?
Feature	    Lazy Loading 💤	                          Eager Loading 🚀	                        Explicit Loading 🎭

Use Case	When related data is rarely needed	     When related data is always needed	       When manual control is required
Performance	Faster initial load, multiple queries	 Single query but more data loaded	       Controlled, but multiple queries
Best for	E-commerce, blogs, comments, logs	    HR systems, reports, dashboards	           Healthcare, finance, large datasets